// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ping.proto

#include "ping.pb.h"
#include "ping.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace pinger {

static const char* Pinger_method_names[] = {
  "/pinger.Pinger/Ping",
  "/pinger.Pinger/PingStream",
};

std::unique_ptr< Pinger::Stub> Pinger::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Pinger::Stub> stub(new Pinger::Stub(channel));
  return stub;
}

Pinger::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(Pinger_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PingStream_(Pinger_method_names[1], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Pinger::Stub::Ping(::grpc::ClientContext* context, const ::pinger::PingRequest& request, ::pinger::PingResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::pinger::PingResponse>* Pinger::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::pinger::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pinger::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pinger::PingResponse>* Pinger::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::pinger::PingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::pinger::PingResponse>::Create(channel_.get(), cq, rpcmethod_Ping_, context, request, false);
}

::grpc::ClientReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>* Pinger::Stub::PingStreamRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>(channel_.get(), rpcmethod_PingStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>* Pinger::Stub::AsyncPingStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>::Create(channel_.get(), cq, rpcmethod_PingStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>* Pinger::Stub::PrepareAsyncPingStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReaderWriter< ::pinger::PingRequest, ::pinger::PingResponse>::Create(channel_.get(), cq, rpcmethod_PingStream_, context, false, nullptr);
}

Pinger::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Pinger_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Pinger::Service, ::pinger::PingRequest, ::pinger::PingResponse>(
          std::mem_fn(&Pinger::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Pinger_method_names[1],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< Pinger::Service, ::pinger::PingRequest, ::pinger::PingResponse>(
          std::mem_fn(&Pinger::Service::PingStream), this)));
}

Pinger::Service::~Service() {
}

::grpc::Status Pinger::Service::Ping(::grpc::ServerContext* context, const ::pinger::PingRequest* request, ::pinger::PingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Pinger::Service::PingStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::pinger::PingResponse, ::pinger::PingRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pinger

